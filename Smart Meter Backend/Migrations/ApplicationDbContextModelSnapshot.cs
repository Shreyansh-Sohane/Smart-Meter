// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartMeterBackend.Data.Context;

#nullable disable

namespace SmartMeterBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Address", b =>
                {
                    b.Property<long>("Aid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("aid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Aid"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("Houseno")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("houseno");

                    b.Property<string>("Lanelocality")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("lanelocality");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("pincode");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("state");

                    b.HasKey("Aid")
                        .HasName("address_pkey");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Arrear", b =>
                {
                    b.Property<long>("Aid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("aid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Aid"));

                    b.Property<string>("Atype")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("atype");

                    b.Property<long>("Billid")
                        .HasColumnType("bigint")
                        .HasColumnName("billid");

                    b.Property<long>("Consumerid")
                        .HasColumnType("bigint")
                        .HasColumnName("consumerid");

                    b.Property<string>("Paidstatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("paidstatus")
                        .HasDefaultValueSql("'Unpaid'::character varying");

                    b.HasKey("Aid")
                        .HasName("arrears_pkey");

                    b.HasIndex("Billid");

                    b.HasIndex("Consumerid");

                    b.ToTable("arrears", (string)null);
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Billing", b =>
                {
                    b.Property<long>("Billid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("billid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Billid"));

                    b.Property<decimal>("Baseamount")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("baseamount");

                    b.Property<DateOnly>("Billingperiodend")
                        .HasColumnType("date")
                        .HasColumnName("billingperiodend");

                    b.Property<DateOnly>("Billingperiodstart")
                        .HasColumnType("date")
                        .HasColumnName("billingperiodstart");

                    b.Property<long>("Consumerid")
                        .HasColumnType("bigint")
                        .HasColumnName("consumerid");

                    b.Property<DateTime?>("Disconnectiondate")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("disconnectiondate");

                    b.Property<DateOnly>("Duedate")
                        .HasColumnType("date")
                        .HasColumnName("duedate");

                    b.Property<DateTime>("Generatedat")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("generatedat")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Meterid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("meterid");

                    b.Property<DateTime?>("Paiddate")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("paiddate");

                    b.Property<string>("Paymentstatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("paymentstatus")
                        .HasDefaultValueSql("'Unpaid'::character varying");

                    b.Property<decimal>("Taxamount")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("taxamount");

                    b.Property<decimal?>("Totalamount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("totalamount")
                        .HasComputedColumnSql("(baseamount + taxamount)", true);

                    b.Property<decimal>("Totalunitsconsumed")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)")
                        .HasColumnName("totalunitsconsumed");

                    b.HasKey("Billid")
                        .HasName("billing_pkey");

                    b.HasIndex("Consumerid");

                    b.HasIndex("Meterid");

                    b.ToTable("billing", (string)null);
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Consumer", b =>
                {
                    b.Property<long>("Consumerid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("consumerid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Consumerid"));

                    b.Property<long?>("Aid")
                        .HasColumnType("bigint")
                        .HasColumnName("aid");

                    b.Property<DateTime>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Createdby")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("createdby")
                        .HasDefaultValueSql("'system'::character varying");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("Orgunitid")
                        .HasColumnType("integer")
                        .HasColumnName("orgunitid");

                    b.Property<byte[]>("Passwordhash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("passwordhash");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("phone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Active'::character varying");

                    b.Property<int>("Tariffid")
                        .HasColumnType("integer")
                        .HasColumnName("tariffid");

                    b.Property<DateTime?>("Updatedat")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedat");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updatedby");

                    b.HasKey("Consumerid")
                        .HasName("consumer_pkey");

                    b.HasIndex("Aid");

                    b.HasIndex("Orgunitid");

                    b.HasIndex("Tariffid");

                    b.ToTable("consumer", (string)null);
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Meter", b =>
                {
                    b.Property<string>("Meterserialno")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("meterserialno");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("category");

                    b.Property<long?>("Consumerid")
                        .HasColumnType("bigint")
                        .HasColumnName("consumerid");

                    b.Property<string>("Firmware")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firmware");

                    b.Property<string>("Iccid")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("iccid");

                    b.Property<string>("Imsi")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("imsi");

                    b.Property<DateTime>("Installtsutc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("installtsutc");

                    b.Property<string>("Ipaddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("ipaddress");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("manufacturer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Active'::character varying");

                    b.HasKey("Meterserialno")
                        .HasName("meter_pkey");

                    b.HasIndex("Consumerid");

                    b.ToTable("meter", (string)null);
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Meterreading", b =>
                {
                    b.Property<int>("Meterreadingid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("meterreadingid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Meterreadingid"));

                    b.Property<decimal>("Current")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("current");

                    b.Property<decimal?>("Energyconsumed")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)")
                        .HasColumnName("energyconsumed");

                    b.Property<string>("Meterid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("meterid");

                    b.Property<DateTime>("Meterreadingdate")
                        .HasPrecision(3)
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("meterreadingdate");

                    b.Property<decimal>("Voltage")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("voltage");

                    b.HasKey("Meterreadingid")
                        .HasName("meterreading_pkey");

                    b.HasIndex("Meterid");

                    b.ToTable("meterreading", (string)null);
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Orgunit", b =>
                {
                    b.Property<int>("Orgunitid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("orgunitid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Orgunitid"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int?>("Parentid")
                        .HasColumnType("integer")
                        .HasColumnName("parentid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.HasKey("Orgunitid")
                        .HasName("orgunit_pkey");

                    b.HasIndex("Parentid");

                    b.HasIndex(new[] { "Type" }, "ix_orgunit_type_including");

                    b.ToTable("orgunit", (string)null);
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Tariff", b =>
                {
                    b.Property<int>("Tariffid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tariffid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Tariffid"));

                    b.Property<decimal>("Baserate")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("baserate");

                    b.Property<DateOnly>("Effectivefrom")
                        .HasColumnType("date")
                        .HasColumnName("effectivefrom");

                    b.Property<DateOnly?>("Effectiveto")
                        .HasColumnType("date")
                        .HasColumnName("effectiveto");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Taxrate")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("taxrate");

                    b.HasKey("Tariffid")
                        .HasName("tariff_pkey");

                    b.ToTable("tariff", (string)null);
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Tariffdetail", b =>
                {
                    b.Property<long>("Tariffdetailsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("tariffdetailsid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Tariffdetailsid"));

                    b.Property<int>("Tariffid")
                        .HasColumnType("integer")
                        .HasColumnName("tariffid");

                    b.Property<int>("Tariffslabid")
                        .HasColumnType("integer")
                        .HasColumnName("tariffslabid");

                    b.Property<int>("Tarifftodid")
                        .HasColumnType("integer")
                        .HasColumnName("tarifftodid");

                    b.HasKey("Tariffdetailsid")
                        .HasName("tariffdetails_pkey");

                    b.HasIndex("Tariffid");

                    b.HasIndex("Tariffslabid");

                    b.HasIndex("Tarifftodid");

                    b.ToTable("tariffdetails", (string)null);
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Tariffslab", b =>
                {
                    b.Property<int>("Tariffslabid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tariffslabid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Tariffslabid"));

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<decimal>("Fromkwh")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)")
                        .HasColumnName("fromkwh");

                    b.Property<decimal>("Rateperkwh")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)")
                        .HasColumnName("rateperkwh");

                    b.Property<int>("Tariffid")
                        .HasColumnType("integer")
                        .HasColumnName("tariffid");

                    b.Property<decimal>("Tokwh")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)")
                        .HasColumnName("tokwh");

                    b.HasKey("Tariffslabid")
                        .HasName("tariffslab_pkey");

                    b.HasIndex("Tariffid");

                    b.ToTable("tariffslab", (string)null);
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Todrule", b =>
                {
                    b.Property<int>("Todruleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("todruleid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Todruleid"));

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<TimeOnly>("Endtime")
                        .HasPrecision(0)
                        .HasColumnType("time(0) without time zone")
                        .HasColumnName("endtime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Rateperkwh")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)")
                        .HasColumnName("rateperkwh");

                    b.Property<TimeOnly>("Starttime")
                        .HasPrecision(0)
                        .HasColumnType("time(0) without time zone")
                        .HasColumnName("starttime");

                    b.Property<int>("Tariffid")
                        .HasColumnType("integer")
                        .HasColumnName("tariffid");

                    b.HasKey("Todruleid")
                        .HasName("todrule_pkey");

                    b.HasIndex("Tariffid");

                    b.HasIndex(new[] { "Name" }, "ix_todrule_name");

                    b.ToTable("todrule", (string)null);
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.User", b =>
                {
                    b.Property<long>("Userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Userid"));

                    b.Property<string>("Displayname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("displayname");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("imageurl");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<DateTime?>("Lastloginutc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastloginutc");

                    b.Property<byte[]>("Passwordhash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("passwordhash");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("phone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.Property<string>("testing")
                        .HasColumnType("text");

                    b.HasKey("Userid")
                        .HasName("User_pkey");

                    b.HasIndex(new[] { "Username" }, "User_username_key")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Arrear", b =>
                {
                    b.HasOne("SmartMeterBackend.Data.Entities.Billing", "Bill")
                        .WithMany("Arrears")
                        .HasForeignKey("Billid")
                        .IsRequired()
                        .HasConstraintName("arrears_billid_fkey");

                    b.HasOne("SmartMeterBackend.Data.Entities.Consumer", "Consumer")
                        .WithMany("Arrears")
                        .HasForeignKey("Consumerid")
                        .IsRequired()
                        .HasConstraintName("arrears_consumerid_fkey");

                    b.Navigation("Bill");

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Billing", b =>
                {
                    b.HasOne("SmartMeterBackend.Data.Entities.Consumer", "Consumer")
                        .WithMany("Billings")
                        .HasForeignKey("Consumerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("billing_consumerid_fkey");

                    b.HasOne("SmartMeterBackend.Data.Entities.Meter", "Meter")
                        .WithMany("Billings")
                        .HasForeignKey("Meterid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("billing_meterid_fkey");

                    b.Navigation("Consumer");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Consumer", b =>
                {
                    b.HasOne("SmartMeterBackend.Data.Entities.Address", "AidNavigation")
                        .WithMany("Consumers")
                        .HasForeignKey("Aid")
                        .HasConstraintName("consumer_aid_fkey");

                    b.HasOne("SmartMeterBackend.Data.Entities.Orgunit", "Orgunit")
                        .WithMany("Consumers")
                        .HasForeignKey("Orgunitid")
                        .IsRequired()
                        .HasConstraintName("consumer_orgunitid_fkey");

                    b.HasOne("SmartMeterBackend.Data.Entities.Tariff", "Tariff")
                        .WithMany("Consumers")
                        .HasForeignKey("Tariffid")
                        .IsRequired()
                        .HasConstraintName("consumer_tariffid_fkey");

                    b.Navigation("AidNavigation");

                    b.Navigation("Orgunit");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Meter", b =>
                {
                    b.HasOne("SmartMeterBackend.Data.Entities.Consumer", "Consumer")
                        .WithMany("Meters")
                        .HasForeignKey("Consumerid")
                        .HasConstraintName("meter_consumerid_fkey");

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Meterreading", b =>
                {
                    b.HasOne("SmartMeterBackend.Data.Entities.Meter", "Meter")
                        .WithMany("Meterreadings")
                        .HasForeignKey("Meterid")
                        .IsRequired()
                        .HasConstraintName("meterreading_meterid_fkey");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Orgunit", b =>
                {
                    b.HasOne("SmartMeterBackend.Data.Entities.Orgunit", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("Parentid")
                        .HasConstraintName("orgunit_parentid_fkey");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Tariffdetail", b =>
                {
                    b.HasOne("SmartMeterBackend.Data.Entities.Tariff", "Tariff")
                        .WithMany("Tariffdetails")
                        .HasForeignKey("Tariffid")
                        .IsRequired()
                        .HasConstraintName("tariffdetails_tariffid_fkey");

                    b.HasOne("SmartMeterBackend.Data.Entities.Tariffslab", "Tariffslab")
                        .WithMany("Tariffdetails")
                        .HasForeignKey("Tariffslabid")
                        .IsRequired()
                        .HasConstraintName("tariffdetails_tariffslabid_fkey");

                    b.HasOne("SmartMeterBackend.Data.Entities.Todrule", "Tarifftod")
                        .WithMany("Tariffdetails")
                        .HasForeignKey("Tarifftodid")
                        .IsRequired()
                        .HasConstraintName("tariffdetails_tarifftodid_fkey");

                    b.Navigation("Tariff");

                    b.Navigation("Tariffslab");

                    b.Navigation("Tarifftod");
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Tariffslab", b =>
                {
                    b.HasOne("SmartMeterBackend.Data.Entities.Tariff", "Tariff")
                        .WithMany("Tariffslabs")
                        .HasForeignKey("Tariffid")
                        .IsRequired()
                        .HasConstraintName("tariffslab_tariffid_fkey");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Todrule", b =>
                {
                    b.HasOne("SmartMeterBackend.Data.Entities.Tariff", "Tariff")
                        .WithMany("Todrules")
                        .HasForeignKey("Tariffid")
                        .IsRequired()
                        .HasConstraintName("todrule_tariffid_fkey");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Address", b =>
                {
                    b.Navigation("Consumers");
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Billing", b =>
                {
                    b.Navigation("Arrears");
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Consumer", b =>
                {
                    b.Navigation("Arrears");

                    b.Navigation("Billings");

                    b.Navigation("Meters");
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Meter", b =>
                {
                    b.Navigation("Billings");

                    b.Navigation("Meterreadings");
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Orgunit", b =>
                {
                    b.Navigation("Consumers");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Tariff", b =>
                {
                    b.Navigation("Consumers");

                    b.Navigation("Tariffdetails");

                    b.Navigation("Tariffslabs");

                    b.Navigation("Todrules");
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Tariffslab", b =>
                {
                    b.Navigation("Tariffdetails");
                });

            modelBuilder.Entity("SmartMeterBackend.Data.Entities.Todrule", b =>
                {
                    b.Navigation("Tariffdetails");
                });
#pragma warning restore 612, 618
        }
    }
}
